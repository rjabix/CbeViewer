@page "/watch/{Folder}/{File}"
@using CbeViewer.Data
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject DataRepository DataRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@attribute [AllowAnonymous]
<h3>Watch Video</h3>

<video id="video-player" controls style="width: 100%; max-height: 800px; background-color: black;" data-folder="@Folder" data-file="@File">
    <source src="/api/video/stream/@Folder/@File" type="video/mp4" />
    Ваш браузер не підтримує відтворення відео.
</video>

@code {
    [Parameter]
    public string Folder { get; set; }

    [Parameter]
    public string File { get; set; }

    private string UserName { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            bool auth = authState.User.Identity.IsAuthenticated;
            if (auth)
            {
                var initialSeconds = await DataRepository.GetInitialSeconds(Folder, File, authState.User.Identity.Name);
                var dotNetReference = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("InitPage", initialSeconds, dotNetReference); // fetching the video initial seconds
                UserName = authState.User.Identity.Name;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    [JSInvokable]
    public async Task OnTimeUpdate(double currentTime)
    {
        await DataRepository.SetInitialSeconds(Folder, File, currentTime, UserName);
    }
}

<script>
    function InitPage(initSeconds, dotNetReference) {
        // assuming that we are already authenticated
        const video = document.getElementById('video-player');
        video.currentTime = initSeconds;
        const url = `/api/video/initial-seconds/${video.dataset.folder}/${video.dataset.file}`;
    /*  let initsec = 0;
        console.log("Fetching initial seconds from server...");
        fetch(url, { headers: { 'Content-Type': 'application/json' } })
            .then(response => response.text())
            .then(res => {
                if (parseInt(res) > 0) {
                    video.currentTime = parseInt(res);
                }
                initsec = parseInt(res);
            })
            .catch(e => console.error(e));
    */
        let timesChanged = 0;
        video.addEventListener("timeupdate", function (e) {
            if (timesChanged < 3 * 40) { // to do one request per +-20 (real 17) seconds
                timesChanged++;
                return;
            }
            timesChanged = 0;
            console.log("Sending time to server...");
            /*fetch(`${url}?time=${video.currentTime}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            }).catch(e => console.error(e)); */
            dotNetReference.invokeMethodAsync('OnTimeUpdate', video.currentTime);
        });
    }
</script>